# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/Tumor purity analysis - export7.ipynb (unless otherwise specified).

__all__ = ['show_image_specs', 'summarize_tumor_purity', 'plot_HE_segmap', 'summarize_image_properties']

# Cell
# export

import sys
import openslide


# Cell

import pandas as pd

def show_image_specs(fname):
    '''
    show the image specifications such as magnification, vendor, resolution, etc

    returns a data frame
    '''

    if type(fname) is list:
        df_specs= pd.DataFrame()
        for i in fname:
            df_specs= df_specs.append(show_image_specs(i))
        return df_specs

    dat_img= openslide.open_slide(fname)
    mag= float(dat_img.properties[openslide.PROPERTY_NAME_OBJECTIVE_POWER])
    vendor= (dat_img.properties[openslide.PROPERTY_NAME_VENDOR])
    mppx= float(dat_img.properties[openslide.PROPERTY_NAME_MPP_X])
    mppy= float(dat_img.properties[openslide.PROPERTY_NAME_MPP_Y])
    w, h=     dat_img.dimensions
    levels= dat_img.level_count
    df= pd.DataFrame({"File": fname, "Magnification": mag, "Vendor": vendor,
                      "MPP_X": [mppx], "MPP_Y": [mppy], "Width": [w], "Height": [h], "Levels": [levels]})
    # print(dat_img.properties[openslide.PROPERTY_NAME_BACKGROUND_COLOR])
    return df




# Cell

def summarize_tumor_purity(files, dat_purity, img_cls, s= 1, fs= 20, reg= False, output_pdf= None):
    '''
    load prediction files (pkl) and calculate correlation of tumor purity with pathologist estimates

    '''
    df_TME= perf_eval.make_TME_table(files, img_cls)
    df_TME['Image']= df_TME['Sample'].apply(lambda x: "TNBC_{}".format(x.replace(".svs",'')))
    df_TME= df_TME.join(dat_purity.set_index('Image Tag'), on= 'Image')

    df_cc= df_TME[['Tumor purity (% tiles)', 'Tumor Purity']].corr('spearman')
    print(df_cc)

    sns.lmplot(x= 'Tumor Purity', y= 'Tumor purity (% tiles)', data= df_TME, fit_reg= reg, height= 10, scatter_kws={"s": s})
    plt.ylim((0,1))
    plt.xlim((0,.9));
    plt.xticks(fontsize= fs)
    plt.yticks(fontsize= fs)
    plt.xlabel('Tumor content by pathologist', fontsize= fs)
    plt.ylabel('Tumor content by neural net', fontsize= fs);
    plt.title("Tumor content correlation= {:.2f}".format(df_cc.iloc[0,1]))

    if output_pdf is not None:
        plt.savefig(output_pdf, dpi= 300)
    plt.show()
    return df_TME, df_cc

# Cell

def plot_HE_segmap(dat_pred, img_file, to_plot= ['Tumor', 'Stroma','Lymphocytes', 'Necrosis'], threshold= -1, title= None, figsize= (20,12)):
    '''
    plot raw H&E image and predicted segmaps side by side

    dat_pred: a tuple of predicted image labels and coordinates. if a file name is provided, the contents are loaded via pickle.load
    img_file: H&E image file name
    to_plot: image classes to generate segmentation heatmaps for
    threshold: cutoff of prediction scores to make positive calls
    title: title for the H&E image
    figsize: figure size

    '''

    if type(dat_pred) is str:
        dat_pred= pkl.load(open(dat_pred, 'rb'))

    num_cls= len(to_plot)
    nx= num_cls+1

    dat_img= openslide.open_slide(img_file)
    img_samp= dat_img.get_thumbnail((500,500))

    plt.figure(figsize= figsize)
    plt.subplot(1,nx,1)
    plt.imshow(img_samp)
    if title is None:
        plt.title(os.path.basename(img_file).replace(".svs",''))
    else:
        plt.title(title)
    plt.xticks([])
    plt.yticks([])
    for i in range(num_cls):
        plt.subplot(1,nx, i+ 2)
        # img_classifier.make_masked_channels(dat_pred[0], dat_pred[1], to_plot[i], dat_pred[2][0], dat_pred[2][1], useGlass= True, threshold= threshold, verbose= False);
        make_masked_channels2(dat_pred[0], dat_pred[1], to_plot[i], dat_pred[2][0], dat_pred[2][1], useGlass= True, threshold= threshold, verbose= False);
        plt.xticks([])
        plt.yticks([])
    plt.tight_layout()

# Cell

from tqdm import tqdm

def summarize_image_properties(img_files):
    df_all_images= pd.DataFrame()

    for i in tqdm(img_files):
        tmpimg= openslide.open_slide(i)
        df_all_images= df_all_images.append(pd.DataFrame({'File': [i], 'Sample': [os.path.basename(i).replace(".svs",'').replace('.mrxs','')],
                                                          'Vendor': [tmpimg.properties[openslide.PROPERTY_NAME_VENDOR]],
                                    'Magnification': [ int(tmpimg.properties[openslide.PROPERTY_NAME_OBJECTIVE_POWER]) ],
                                    'MPP_X': [ float(tmpimg.properties[openslide.PROPERTY_NAME_MPP_X]) ],
                                    'MPP_Y': [ float(tmpimg.properties[openslide.PROPERTY_NAME_MPP_Y]) ]}))

    # print(i, '->', )
    return df_all_images